---
- name: Create rolldice deployment manifest
  kubernetes.core.k8s:
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: rolldice
        namespace: "{{ k8s_namespace }}"
        labels:
          app: rolldice
      spec:
        replicas: "{{ rolldice_replicas }}"
        selector:
          matchLabels:
            app: rolldice
        template:
          metadata:
            labels:
              app: rolldice
          spec:
            containers:
            - name: rolldice
              image: "{{ rolldice_image }}"
              ports:
              - containerPort: "{{ rolldice_port }}"
              env:
              # OpenTelemetry configuration to send data to k8s-infra OTEL collector
              - name: HOST_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.hostIP
              - name: K8S_POD_IP
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: status.podIP
              - name: K8S_POD_UID
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.uid
              - name: OTEL_EXPORTER_OTLP_INSECURE
                value: "true"
              - name: OTEL_EXPORTER_OTLP_ENDPOINT
                value: "$(HOST_IP):4317"
              - name: OTEL_RESOURCE_ATTRIBUTES
                value: "service.name=rolldice-app,service.version=1.0.0,deployment.environment={{ deployment_environment }},k8s.pod.ip=$(K8S_POD_IP),k8s.pod.uid=$(K8S_POD_UID)"
              - name: OTEL_SERVICE_NAME
                value: "rolldice-app"
    state: present
    wait: true
    wait_condition:
      type: Progressing
      status: "True"
      reason: NewReplicaSetAvailable
    wait_timeout: 300

- name: Create rolldice service
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: rolldice-service
        namespace: "{{ k8s_namespace }}"
        labels:
          app: rolldice
      spec:
        selector:
          app: rolldice
        ports:
        - port: 80
          targetPort: "{{ rolldice_port }}"
          protocol: TCP
        type: ClusterIP
    state: present

- name: Create rolldice ingress (optional)
  kubernetes.core.k8s:
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: rolldice-ingress
        namespace: "{{ k8s_namespace }}"
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
      spec:
        rules:
        - host: rolldice.local
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: rolldice-service
                  port:
                    number: 80
    state: present
  ignore_errors: yes  # Ingress controller might not be available

- name: Wait for rolldice pods to be ready
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: "{{ k8s_namespace }}"
    label_selectors:
      - "app=rolldice"
    wait: true
    wait_condition:
      type: Ready
      status: "True"
    wait_timeout: 300
  register: rolldice_pods

- name: Display rolldice deployment status
  ansible.builtin.debug:
    msg: |
      Rolldice application deployed successfully!
      Namespace: {{ k8s_namespace }}
      Replicas: {{ rolldice_replicas }}
      
      The application is configured to send telemetry data to the k8s-infra OTEL collector
      which will forward it to your SigNoz instance at: {{ signoz_otel_endpoint }}
      
      To test the application:
      kubectl port-forward -n {{ k8s_namespace }} service/rolldice-service 8080:80
      curl http://localhost:8080/rolldice
      
      To view logs:
      kubectl logs -n {{ k8s_namespace }} -l app=rolldice -f

- name: Create test job to generate some telemetry data
  kubernetes.core.k8s:
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: rolldice-test-traffic
        namespace: "{{ k8s_namespace }}"
      spec:
        template:
          spec:
            containers:
            - name: curl-test
              image: curlimages/curl:latest
              command:
              - /bin/sh
              - -c
              - |
                echo "Generating test traffic to rolldice service..."
                for i in $(seq 1 10); do
                  echo "Request $i:"
                  curl -s http://rolldice-service/rolldice || echo "Request failed"
                  sleep 2
                done
                echo "Test traffic generation completed!"
            restartPolicy: Never
        backoffLimit: 3
    state: present
    wait: true
    wait_condition:
      type: Complete
      status: "True"
    wait_timeout: 120
  ignore_errors: yes
