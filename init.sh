#!/usr/bin/env bash
set -euo pipefail

echo "ðŸ‘‰ Deleting any existing kind cluster named sigtestâ€¦"
kind delete cluster --name sigtest

echo "ðŸ‘‰ Removing any old SigNoz containerâ€¦"
docker rm -f signoz 2>/dev/null || true

# â”€â”€â”€ 1) INSTALL PREREQS â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
echo "ðŸ‘‰ Installing prerequisitesâ€¦"
sudo apt-get update
sudo apt-get install -y python3-pip curl

# install kind
echo "ðŸ‘‰ Installing kindâ€¦"
curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
chmod +x ./kind
sudo mv ./kind /usr/local/bin/

# install ansible-core (the correct package) and ensure the CLI is on your PATH
echo "ðŸ‘‰ Installing ansible-coreâ€¦"
pip3 install --user ansible-core
pip3 install --user kubernetes
export PATH="$HOME/.local/bin:$PATH"

# install the Kubernetes collection for Ansible
echo "ðŸ‘‰ Installing kubernetes.core collectionâ€¦"
ansible-galaxy collection install kubernetes.core


# â”€â”€â”€ 3) START KIND CLUSTER â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
echo "ðŸ‘‰ Creating kind clusterâ€¦"
kind create cluster --name sigtest
kubectl cluster-info --context kind-sigtest

# â”€â”€â”€ 4) LAUNCH SIGNOZ IN DOCKER â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
echo "ðŸ‘‰ Launching SigNoz in Docker (with persistent sqlite dir)â€¦"
mkdir -p ./signoz-data
docker run -d --name signoz \
  -p 3301:3301 -p 3200:3200 \
  -v "$(pwd)/signoz-data":/var/lib/signoz \
  signoz/signoz:latest

# â”€â”€â”€ 5) EXPORT DOCKERâ€‘HOST IP â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
echo "ðŸ‘‰ Determining Dockerâ€‘bridge IPâ€¦"
export DOCKER_HOST_IP=$(ip -4 addr show docker0 \
  | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
echo "   Docker host IP: $DOCKER_HOST_IP"

# â”€â”€â”€ 6) DEPLOY THE k8sâ€‘infra CHART â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
echo "ðŸ‘‰ Deploying k8s-infra chart via Ansibleâ€¦"
ansible-playbook up.yml \
  -e signoz_backend_url="http://${DOCKER_HOST_IP}:3301"

# wait until all pods are Running
echo "ðŸ‘‰ Waiting for SigNoz pods to be Runningâ€¦"
kubectl get pods -n signoz-system --watch

# â”€â”€â”€ 7) DEMO WORKLOAD â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
echo "ðŸ‘‰ Creating demo workloadâ€¦"
kubectl create namespace demo
kubectl create deployment nginx-demo \
  --image=nginx \
  --replicas=1 \
  -n demo

# spike it once for metrics
POD=$(kubectl get po -n demo -l app=nginx-demo -o name)
echo "ðŸ‘‰ Hitting demo pod onceâ€¦"
kubectl exec -n demo $POD -- curl -s localhost >/dev/null

# â”€â”€â”€ 8) VIEW METRICS IN SIGNOZ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
echo
echo "ðŸŽ‰ SigNoz is collecting metrics!"
echo "Open in browser: http://localhost:3200"
echo "  â€¢ Login: admin@signoz.io / admin"
echo "  â€¢ Metrics â†’ Explore â†’ search 'container_cpu_usage_seconds_total'"
echo "  â€¢ Filter by namespace=demo, pod=<your-pod-name>"

